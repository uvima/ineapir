[{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://uvima.github.io/ineapir/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://uvima.github.io/ineapir/articles/filter_data.html","id":"filtering-data-from-tables","dir":"Articles","previous_headings":"","what":"Filtering data from tables","title":"How to filter data","text":"necessary pass argument filter get_data_table() function, list() variables values take. two approaches build filter depending table type.","code":""},{"path":"https://uvima.github.io/ineapir/articles/filter_data.html","id":"case-one-","dir":"Articles","previous_headings":"Filtering data from tables","what":"Case one.","title":"How to filter data","text":"URL: https://www.ine.es/jaxiT3/Tabla.htm?t=50902 first step obtain values groups (combo boxes) table interest us build filter. information build filter follows.","code":"library(ineapir)  # Get metadata information of the table metadata <- get_metadata_table_varval(idTable = 50902, validate = FALSE) head(metadata,4) #>       Id Fk_Variable                             Nombre Codigo #> 1 304092         762                     Índice general     00 #> 2 304093         762 Alimentos y bebidas no alcohólicas     01 #> 3 304094         762       Bebidas alcohólicas y tabaco     02 #> 4 304095         762                  Vestido y calzado     03 tail(metadata,4) #>    Id Fk_Variable                        Nombre Codigo #> 14 83           3                        Índice      0 #> 15 84           3             Variación mensual      1 #> 16 74           3               Variación anual      2 #> 17 87           3 Variación en lo que va de año      5 # The filter is a list() filter <- list(\"3\" = \"74\" ,     # variable id = 3, value id = 74                \"762\" = \"304092\" # variable id = 762, value id = 304092                )  # Request data using the filter ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 5, validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre T3_Periodo Anyo Valor #> 1   Total Nacional. Índice general. Variación anual.         M09 2023   3.5 #> 1.1 Total Nacional. Índice general. Variación anual.         M08 2023   2.6 #> 1.2 Total Nacional. Índice general. Variación anual.         M07 2023   2.3 #> 1.3 Total Nacional. Índice general. Variación anual.         M06 2023   1.9 #> 1.4 Total Nacional. Índice general. Variación anual.         M05 2023   3.2"},{"path":"https://uvima.github.io/ineapir/articles/filter_data.html","id":"case-two-pc-axis-file","dir":"Articles","previous_headings":"Filtering data from tables","what":"Case two (pc-axis file)","title":"How to filter data","text":"URL: https://www.ine.es/jaxi/Tabla.htm?path=/t20/e245/p08/l0/&file=01001.px first step obtain metadata information table. information build filter follows.","code":"# Get metadata information of the table metadata <- get_metadata_table_varval(idTable = \"t20/e245/p08/l0/01001.px\") metadata #>            Nombre        Codigo         Variable.Nombre      Variable.Codigo #> 1    TOTAL EDADES   totaledades edad (3 grupos de edad)    edad3gruposdeedad #> 2           TOTAL         total   Españoles/Extranjeros espanolesextranjeros #> 3     Ambos sexos    ambossexos                    Sexo                 sexo #> 6         Hombres       hombres                    Sexo                 sexo #> 9         Mujeres       mujeres                    Sexo                 sexo #> 11      Españoles     espanoles   Españoles/Extranjeros espanolesextranjeros #> 20    Extranjeros   extranjeros   Españoles/Extranjeros espanolesextranjeros #> 29  % Extranjeros extranjeros~3   Españoles/Extranjeros espanolesextranjeros #> 37      0-15 años       015anos edad (3 grupos de edad)    edad3gruposdeedad #> 73     16-64 años      1664anos edad (3 grupos de edad)    edad3gruposdeedad #> 109      65 y más        65ymas edad (3 grupos de edad)    edad3gruposdeedad # NOTE: for px tables we can use a filter. metadata <- get_metadata_table_varval(idTable = \"t20/e245/p08/l0/01001.px\",                                       filter = list(sexo = \"ambossexos\")) metadata #>           Nombre        Codigo         Variable.Nombre      Variable.Codigo #> 1   TOTAL EDADES   totaledades edad (3 grupos de edad)    edad3gruposdeedad #> 2          TOTAL         total   Españoles/Extranjeros espanolesextranjeros #> 3    Ambos sexos    ambossexos                    Sexo                 sexo #> 5      Españoles     espanoles   Españoles/Extranjeros espanolesextranjeros #> 8    Extranjeros   extranjeros   Españoles/Extranjeros espanolesextranjeros #> 11 % Extranjeros extranjeros~3   Españoles/Extranjeros espanolesextranjeros #> 13     0-15 años       015anos edad (3 grupos de edad)    edad3gruposdeedad #> 25    16-64 años      1664anos edad (3 grupos de edad)    edad3gruposdeedad #> 37      65 y más        65ymas edad (3 grupos de edad)    edad3gruposdeedad # Build the filter with the codes of variables and values filter <- list(sexo = \"ambossexos\",                              espanolesextranjeros = \"total\",                   edad3gruposdeedad = \"totaledades\"                 )   # Request data using the filter poblacion <- get_data_table(idTable = \"t20/e245/p08/l0/01001.px\", unnest = TRUE,                             tip = \"A\", nlast = 5, filter = filter,                             validate = FALSE) poblacion #>                             Nombre NombrePeriodo    Valor #> 1 TOTAL EDADES, TOTAL, Ambos sexos          2022 47475420 #> 2 TOTAL EDADES, TOTAL, Ambos sexos          2021 47385107 #> 3 TOTAL EDADES, TOTAL, Ambos sexos          2020 47450795 #> 4 TOTAL EDADES, TOTAL, Ambos sexos          2019 47026208 #> 5 TOTAL EDADES, TOTAL, Ambos sexos          2018 46722980"},{"path":"https://uvima.github.io/ineapir/articles/filter_data.html","id":"case-three-tpx-file","dir":"Articles","previous_headings":"Filtering data from tables","what":"Case three (tpx file)","title":"How to filter data","text":"URL: https://www.ine.es/jaxi/Tabla.htm?tpx=33387&L=0 first step obtain metadata information table. information build filter follows. URL: https://www.ine.es/jaxi/Tabla.htm?tpx=52056&L=0 tpx tables contain variable ids value ids. can see obtain metadata information table. case, can use ids instead codes build filter. add alias ~id end id.","code":"# Get metadata information of the table metadata <- get_metadata_table_varval(idTable = 33387) metadata[grepl(\"^\\\\d{1}\\\\D+\",metadata$Codigo),] #>                                         Nombre #> 2                                  1.  Biomasa #> 29  2.  Minerales metálicos (mineral en bruto) #> 50                  3.  Minerales no metálicos #> 106                   4.  Combustibles fósiles #>                                Codigo  Variable.Nombre Variable.Codigo #> 2                            1biomasa tipo de material  tipodematerial #> 29  2mineralesmetalicosmineralenbruto tipo de material  tipodematerial #> 50              3mineralesnometalicos tipo de material  tipodematerial #> 106              4combustiblesfosiles tipo de material  tipodematerial # NOTE: for tpx tables we can use a filter. metadata <- get_metadata_table_varval(idTable = 33387,                                       filter = list(tipodematerial = \"1biomasa\")) metadata[grepl(\"^\\\\d{1}\\\\D+\",metadata$Codigo),] #>        Nombre   Codigo  Variable.Nombre Variable.Codigo #> 1 1.  Biomasa 1biomasa tipo de material  tipodematerial # Build the filter with the codes of variables and values # A variable can take more than one value filter <- list(tipodematerial = c(\"1biomasa\", \"2mineralesmetalicosmineralenbruto\",                                   \"3mineralesnometalicos\", \"4combustiblesfosiles\")                )   # Request data using the filter materiales <- get_data_table(idTable = 33387, unnest = TRUE, tip = \"A\",                              nlast = 1, filter = filter, validate = FALSE) materiales #>                                       Nombre NombrePeriodo     Valor #> 1                                1.  Biomasa 2021 (avance) 135338763 #> 2 2.  Minerales metálicos (mineral en bruto) 2021 (avance)  20805797 #> 3                 3.  Minerales no metálicos 2021 (avance) 226417973 #> 4                   4.  Combustibles fósiles 2021 (avance)    133955 # Get metadata information of the table using a filter. # The filter is useful when the table contains a large number of series # (for example, tables with a large territorial segmentation) which slows down # the information retrieval. metadata <- get_metadata_table_varval(idTable = 52056,                                       filter = list(NAC = \"00\")) head(metadata[order(metadata$Variable.Id),],4) #>            Nombre Codigo    Id Variable.Nombre Variable.Codigo Variable.Id #> 6  Valor absoluto        11406    Tipo de dato                           3 #> 12     Porcentaje           77    Tipo de dato                           3 #> 4           Total          451            Sexo                          18 #> 40        Hombres      1   452            Sexo                          18 # In order to use the ids of variables and values we add the alias '~id' filter = list(\"349~id\" = \"16473~id\",  # variable id = 349, value id = 16473               \"916~id\" = \"391871~id\", # variable id = 909, value id = 391455               \"942~id\" = \"274282~id\", # variable id = 942, value id = 274282               \"999~id\" = \"391770~id\", # variable id = 975, value id = 391438               \"3~id\"   = \"11406~id\"  # variable id = 3, value id = 11406               )  # Request data using the filter explotaciones <- get_data_table(idTable = 52056, unnest = TRUE, tip = \"A\",                              nlast = 1, filter = filter, validate = FALSE) explotaciones #>                                                                                             Nombre #> 1   Total Nacional, Total tramos UTAT, Total mano de obra, Total, Nº explotaciones, Valor absoluto #> 2 Total Nacional, Total tramos UTAT, Total mano de obra, Hombres, Nº explotaciones, Valor absoluto #> 3 Total Nacional, Total tramos UTAT, Total mano de obra, Mujeres, Nº explotaciones, Valor absoluto #>    Valor #> 1 894718 #> 2 757886 #> 3 356571"},{"path":"https://uvima.github.io/ineapir/articles/filter_data.html","id":"filtering-data-from-series","dir":"Articles","previous_headings":"","what":"Filtering data from series","title":"How to filter data","text":"necessary pass argument filter get_data_series_filter() function, list() variables values take. first step obtain variables used operation series belong. second step obtain values variables interest us build filter. information build filter follows. variable can take one value (valid filter data tables well). variable can take empty character \"\" get possible values (valid filter data tables well).","code":"# Variables used in the operation IPC variables <- get_metadata_variables(operation = \"IPC\", validate = FALSE) variables #>     Id                           Nombre Codigo #> 1    3                     Tipo de dato        #> 2   70 Comunidades y Ciudades Autónomas   CCAA #> 3  115                       Provincias   PROV #> 4  269           Grupos especiales 2001        #> 5  270                    Rúbricas 2001        #> 6  349            Totales Territoriales    NAC #> 7  544            Corrección de efectos        #> 8  762                   Grupos ECOICOP        #> 9  763                Subgrupos ECOICOP        #> 10 764                   Clases ECOICOP        #> 11 765                Subclases ECOICOP # Values of the variable with id = 115 provincias <- get_metadata_values(operation = \"IPC\", variable = 115, validate = FALSE) head(provincias) #>   Id Fk_Variable           Nombre Codigo FK_JerarquiaPadres #> 1  2         115      Araba/Álava     01               9012 #> 2  3         115         Albacete     02               9004 #> 3  4         115 Alicante/Alacant     03               9006 #> 4  5         115          Almería     04               8997 #> 5  6         115            Ávila     05               9003 #> 6  7         115          Badajoz     06               9007  # Values of the variable with id = 3 tipo <- get_metadata_values(operation = \"IPC\", variable = 3, validate = FALSE) head(tipo) #>   Id Fk_Variable            Nombre Codigo #> 1 72           3         Dato base        #> 2 74           3   Variación anual        #> 3 83           3            Índice        #> 4 84           3 Variación mensual        #> 5 85           3       Media anual      M #> 6 86           3   Variación anual  # Values of the variable with id = 762 grupos <- get_metadata_values(operation = \"IPC\", variable = 762, validate = FALSE) head(grupos, 4) #>       Id Fk_Variable                             Nombre Codigo #> 1 304092         762                     Índice general     00 #> 2 304093         762 Alimentos y bebidas no alcohólicas     01 #> 3 304094         762       Bebidas alcohólicas y tabaco     02 #> 4 304095         762                  Vestido y calzado     03 #>   FK_JerarquiaPadres #> 1               NULL #> 2             304092 #> 3             304092 #> 4             304092  # We can get all the values at once with the function get_metadata_series_varval varval <- get_metadata_series_varval(operation = \"IPC\", validate = FALSE) head(subset(varval, Fk_Variable == 115)) #>    Id Fk_Variable           Nombre Codigo #> 33  2         115      Araba/Álava     01 #> 34  3         115         Albacete     02 #> 35  4         115 Alicante/Alacant     03 #> 36  5         115          Almería     04 #> 37  6         115            Ávila     05 #> 38  7         115          Badajoz     06 head(subset(varval, Fk_Variable == 3)) #>   Id Fk_Variable            Nombre Codigo #> 1 72           3         Dato base        #> 2 74           3   Variación anual        #> 3 83           3            Índice        #> 4 84           3 Variación mensual        #> 5 85           3       Media anual      M #> 6 86           3   Variación anual head(subset(varval, Fk_Variable == 762), 4) #>         Id Fk_Variable                             Nombre Codigo #> 176 304092         762                     Índice general     00 #> 177 304093         762 Alimentos y bebidas no alcohólicas     01 #> 178 304094         762       Bebidas alcohólicas y tabaco     02 #> 179 304095         762                  Vestido y calzado     03 # The filter is a list() filter <- list(\"115\" = \"2\",     # variable id = 115, value id = 2                \"3\" = \"74\" ,     # variable id = 3, value id = 74                \"762\" = \"304092\" # variable id = 762, value id = 304092                )  # Request data using the filter ipc <- get_data_series_filter(operation = \"IPC\", filter = filter, periodicity = 1,                               unnest = TRUE, tip = \"A\", validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                           Nombre T3_Periodo Anyo Valor #> 1 Araba/Álava. Índice general. Variación anual.  Septiembre 2023   2.9 # The filter is a list() filter <- list(\"115\" = c(\"2\" ,\"3\", \"4\"), # variable id = 115, values id 2, 3, 4                \"3\" = \"74\" ,              # variable id = 3, value id = 74                \"762\" = \"304092\"          # variable id = 762, value id = 304092                )  # Request data using the filter ipc <- get_data_series_filter(operation = \"IPC\", filter = filter, periodicity = 1,                                unnest = TRUE, tip = \"A\", validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre T3_Periodo Anyo Valor #> 1 Alicante/Alacant. Índice general. Variación anual.  Septiembre 2023   3.7 #> 2         Albacete. Índice general. Variación anual.  Septiembre 2023   4.2 #> 3      Araba/Álava. Índice general. Variación anual.  Septiembre 2023   2.9 # The filter is a list() filter <- list(\"115\" = \"\",      # variable id = 115, all values                \"3\" = \"83\" ,     # variable id = 3, value id = 83                \"762\" = \"304092\" # variable id = 762, value id = 304092                )  # Request data using the filter ipc <- get_data_series_filter(operation = \"IPC\", filter = filter, periodicity = 1,                                unnest = TRUE, tip = \"A\", validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                              Nombre T3_Periodo Anyo   Valor #> 1               Salamanca. Índice general. Índice.  Septiembre 2023 113.530 #> 2                  Huelva. Índice general. Índice.  Septiembre 2023 114.678 #> 3             Ciudad Real. Índice general. Índice.  Septiembre 2023 114.798 #> 4        Alicante/Alacant. Índice general. Índice.  Septiembre 2023 113.988 #> 5                 Ourense. Índice general. Índice.  Septiembre 2023 114.470 #> 6  Santa Cruz de Tenerife. Índice general. Índice.  Septiembre 2023 113.918 #> 7               Coruña, A. Índice general. Índice.  Septiembre 2023 113.561 #> 8              Valladolid. Índice general. Índice.  Septiembre 2023 113.457 #> 9                  Huesca. Índice general. Índice.  Septiembre 2023 114.197 #> 10                  Cádiz. Índice general. Índice.  Septiembre 2023 114.179 #> 11                 Málaga. Índice general. Índice.  Septiembre 2023 114.485 #> 12                 Teruel. Índice general. Índice.  Septiembre 2023 114.042 #> 13               Albacete. Índice general. Índice.  Septiembre 2023 114.847 #> 14              Rioja, La. Índice general. Índice.  Septiembre 2023 113.641 #> 15             Pontevedra. Índice general. Índice.  Septiembre 2023 114.676 #> 16                Melilla. Índice general. Índice.  Septiembre 2023 115.116 #> 17                 Cuenca. Índice general. Índice.  Septiembre 2023 114.995 #> 18                 Toledo. Índice general. Índice.  Septiembre 2023 115.823 #> 19                Córdoba. Índice general. Índice.  Septiembre 2023 113.925 #> 20                  Ceuta. Índice general. Índice.  Septiembre 2023 113.627 #> 21                Granada. Índice general. Índice.  Septiembre 2023 113.761 #> 22                  Ávila. Índice general. Índice.  Septiembre 2023 115.527 #> 23              Tarragona. Índice general. Índice.  Septiembre 2023 113.346 #> 24                  Soria. Índice general. Índice.  Septiembre 2023 114.355 #> 25      Valencia/València. Índice general. Índice.  Septiembre 2023 112.791 #> 26            Guadalajara. Índice general. Índice.  Septiembre 2023 115.133 #> 27                 Burgos. Índice general. Índice.  Septiembre 2023 113.394 #> 28                   Lugo. Índice general. Índice.  Septiembre 2023 114.306 #> 29               Gipuzkoa. Índice general. Índice.  Septiembre 2023 113.081 #> 30                Almería. Índice general. Índice.  Septiembre 2023 113.454 #> 31                 Girona. Índice general. Índice.  Septiembre 2023 113.769 #> 32                 Lleida. Índice general. Índice.  Septiembre 2023 114.624 #> 33               Zaragoza. Índice general. Índice.  Septiembre 2023 112.907 #> 34                 Zamora. Índice general. Índice.  Septiembre 2023 115.115 #> 35     Castellón/Castelló. Índice general. Índice.  Septiembre 2023 114.997 #> 36                   Jaén. Índice general. Índice.  Septiembre 2023 113.914 #> 37               Asturias. Índice general. Índice.  Septiembre 2023 113.045 #> 38            Araba/Álava. Índice general. Índice.  Septiembre 2023 112.378 #> 39                Badajoz. Índice general. Índice.  Septiembre 2023 114.235 #> 40                 Madrid. Índice general. Índice.  Septiembre 2023 111.999 #> 41                Bizkaia. Índice general. Índice.  Septiembre 2023 113.485 #> 42              Cantabria. Índice general. Índice.  Septiembre 2023 113.648 #> 43            Palmas, Las. Índice general. Índice.  Septiembre 2023 113.077 #> 44                Segovia. Índice general. Índice.  Septiembre 2023 114.204 #> 45               Palencia. Índice general. Índice.  Septiembre 2023 113.790 #> 46                Sevilla. Índice general. Índice.  Septiembre 2023 113.759 #> 47                   León. Índice general. Índice.  Septiembre 2023 115.808 #> 48         Balears, Illes. Índice general. Índice.  Septiembre 2023 113.923 #> 49              Barcelona. Índice general. Índice.  Septiembre 2023 112.305 #> 50                Navarra. Índice general. Índice.  Septiembre 2023 113.981 #> 51                Cáceres. Índice general. Índice.  Septiembre 2023 112.129 #> 52                 Murcia. Índice general. Índice.  Septiembre 2023 114.009"},{"path":"https://uvima.github.io/ineapir/articles/filter_data_shortcuts.html","id":"filtering-data-from-tables","dir":"Articles","previous_headings":"","what":"Filtering data from tables","title":"How to filter data using shortcut names","text":"use filter shortcuts necessary pass argument filter using shortcut variable name value.","code":""},{"path":"https://uvima.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-one","dir":"Articles","previous_headings":"Filtering data from tables","what":"Example one","title":"How to filter data using shortcut names","text":"Since table id code 50902 belongs IPC operation, can also use values wrapper.","code":"library(ineapir)  # Filter using shortcuts filter <- list(tipodato = \"variación anual\" , # variable id = 3                grupo = \"índice general\"       # variable id = 762                )  # Request data using the filter and shortcut = TRUE ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 5, validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre T3_Periodo Anyo Valor #> 1   Total Nacional. Índice general. Variación anual.         M09 2023   3.5 #> 1.1 Total Nacional. Índice general. Variación anual.         M08 2023   2.6 #> 1.2 Total Nacional. Índice general. Variación anual.         M07 2023   2.3 #> 1.3 Total Nacional. Índice general. Variación anual.         M06 2023   1.9 #> 1.4 Total Nacional. Índice general. Variación anual.         M05 2023   3.2 # Filter with the values wrapper (CPI) filter <- list(values = c(\"variación anual\" , \"índice general\"))  # Request data using the filter and shortcut = TRUE ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 5, validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre T3_Periodo Anyo Valor #> 1   Total Nacional. Índice general. Variación anual.         M09 2023   3.5 #> 1.1 Total Nacional. Índice general. Variación anual.         M08 2023   2.6 #> 1.2 Total Nacional. Índice general. Variación anual.         M07 2023   2.3 #> 1.3 Total Nacional. Índice general. Variación anual.         M06 2023   1.9 #> 1.4 Total Nacional. Índice general. Variación anual.         M05 2023   3.2"},{"path":"https://uvima.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-two","dir":"Articles","previous_headings":"Filtering data from tables","what":"Example two","title":"How to filter data using shortcut names","text":"","code":"# Filter with the values wrapper (GDP) filter <- list(values = c(\"producto interior\", \"datos ajustados\", \"variación anual\"))  # Request data using the filter and shortcut = TRUE pib <- get_data_table(idTable = 30679, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 5, validate = FALSE) pib[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                                                                                                                              Nombre #> 1   Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #> 1.1 Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #> 1.2 Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #> 1.3 Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #> 1.4 Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #>     T3_Periodo Anyo  Valor #> 1           T2 2023 2.1757 #> 1.1         T1 2023 4.1658 #> 1.2         T4 2022 3.8055 #> 1.3         T3 2022 5.3524 #> 1.4         T2 2022 7.2264"},{"path":"https://uvima.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-three","dir":"Articles","previous_headings":"Filtering data from tables","what":"Example three","title":"How to filter data using shortcut names","text":"","code":"# Filter with the values wrapper (population) filter <- list(values = c(\"todas las edades\", \"total\"))  # Request data using the filter and shortcut = TRUE pob <- get_data_table(idTable = 56934, filter = filter, unnest = TRUE,                        tip = \"A\", nlast = 5, validate = FALSE) pob[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                           Nombre    T3_Periodo #> 1   Total Nacional. Todas las edades. Total. Población. Número.  1 de enero de #> 1.1 Total Nacional. Todas las edades. Total. Población. Número.  1 de julio de #> 1.2 Total Nacional. Todas las edades. Total. Población. Número.  1 de enero de #>     Anyo    Valor #> 1   2021 47400798 #> 1.1 2020 47344852 #> 1.2 2020 47318050"},{"path":"https://uvima.github.io/ineapir/articles/filter_data_shortcuts.html","id":"filtering-data-from-series","dir":"Articles","previous_headings":"","what":"Filtering data from series","title":"How to filter data using shortcut names","text":"necessary pass argument filter get_data_series_filter() function. use shortcut variable name value.","code":""},{"path":"https://uvima.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-one-1","dir":"Articles","previous_headings":"Filtering data from series","what":"Example one","title":"How to filter data using shortcut names","text":"","code":"# Filter with the values wrapper (CPI) filter <- list(values = c(\"variación anual\" , \"índice general\", \"total nacional\"))  # Request data using the filter ipc <- get_data_series_filter(operation = \"IPC\", filter = filter,                               periodicity = 1, unnest = TRUE, tip = \"A\",                               validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                                    Nombre #> 1                       Total Nacional. Índice general. Variación anual.  #> 2 Total Nacional. Índice general. Variación anual. Impuestos constantes.  #>   T3_Periodo Anyo Valor #> 1 Septiembre 2023   3.5 #> 2 Septiembre 2023   3.9"},{"path":"https://uvima.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-two-1","dir":"Articles","previous_headings":"Filtering data from series","what":"Example two","title":"How to filter data using shortcut names","text":"","code":"# Filter with the values wrapper (GDP) filter <- list(values = c(\"producto interior\", \"datos ajustados\",                        \"volumen encadenado\", \"variación anual\"))  # Request data using the filter pib <- get_data_series_filter(operation = \"CNTR2010\", filter = filter,                               periodicity = 3, unnest = TRUE, tip = \"A\",                               validate = FALSE) pib[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                                                                                                                                       Nombre #> 1            Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #> 2 Total Nacional. Base 2010. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #>   T3_Periodo Anyo  Valor #> 1         T2 2023 2.1757 #> 2         T2 2019 2.2513"},{"path":"https://uvima.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-three-1","dir":"Articles","previous_headings":"Filtering data from series","what":"Example three","title":"How to filter data using shortcut names","text":"","code":"# Filter with the values wrapper combine with individual shortcuts (population) filter <- list(values = c(\"todas las edades\", \"total nacional\"), nacionalidad = \"total\",                sexo = \"total\", paisnacimiento = \"total\" )  # Request data using the filter pob <- get_data_series_filter(operation = \"ECP\", filter = filter,                               periodicity = 3, unnest = TRUE, tip = \"A\",                               validate = FALSE) pob[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                                       Nombre #> 1 Total Nacional. Total. Todas las edades. Total. Total. Población. Número.  #> 2 Total Nacional. Total. Todas las edades. Total. Total. Población. Número.  #>   T3_Periodo Anyo    Valor #> 1         T2 2023 48196693 #> 2         T2 2023 48196693"},{"path":"https://uvima.github.io/ineapir/articles/identify_codes.html","id":"obtaining-the-identification-code-of-a-table","dir":"Articles","previous_headings":"","what":"Obtaining the identification code of a table","title":"How to identify the codes of tables and series on the INE website","text":"browsing table, three possible cases comes identifying ID. REMARK: id table unique immutable, matter variables/values selected table.","code":""},{"path":"https://uvima.github.io/ineapir/articles/identify_codes.html","id":"case-one","dir":"Articles","previous_headings":"Obtaining the identification code of a table","what":"Case one","title":"How to identify the codes of tables and series on the INE website","text":"URL: https://www.ine.es/jaxiT3/Tabla.htm?t=50902 ID: URL t parameter 50902","code":"library(ineapir) # Request table data with id = 50902 table <- get_data_table(idTable = 50902, nlast = 1, unnest = TRUE) table[1:2,c(\"Nombre\", \"FK_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre FK_Periodo Anyo   Valor #> 1            Total Nacional. Índice general. Índice.           9 2023 113.348 #> 2 Total Nacional. Índice general. Variación mensual.           9 2023   0.200"},{"path":"https://uvima.github.io/ineapir/articles/identify_codes.html","id":"case-two-pc-axis-file","dir":"Articles","previous_headings":"Obtaining the identification code of a table","what":"Case two (pc-axis file)","title":"How to identify the codes of tables and series on the INE website","text":"URL: https://www.ine.es/jaxi/Tabla.htm?path=/t20/e245/p08/l0/&file=01001.px ID: concatenate URL parameters path file one single ID t20/e245/p08/l0/01001.px","code":"# Request table data with id = t20/e245/p08/l0/01001.px table <- get_data_table(idTable = \"t20/e245/p08/l0/01001.px\", nlast = 1, unnest = TRUE) head(table, 3) #>                             Nombre NombrePeriodo    Valor Secreto #> 1 TOTAL EDADES, TOTAL, Ambos sexos          2022 47475420   FALSE #> 2     TOTAL EDADES, TOTAL, Hombres          2022 23265381   FALSE #> 3     TOTAL EDADES, TOTAL, Mujeres          2022 24210039   FALSE"},{"path":"https://uvima.github.io/ineapir/articles/identify_codes.html","id":"case-three-tpx-file","dir":"Articles","previous_headings":"Obtaining the identification code of a table","what":"Case three (tpx file)","title":"How to identify the codes of tables and series on the INE website","text":"URL: https://www.ine.es/jaxi/Tabla.htm?tpx=33387&L=0 ID: URL tpx parameter 33387","code":"# Request table data with id = 33387 table <- get_data_table(idTable = 33387, nlast = 1, unnest = TRUE) head(table, 3) #>                     Nombre NombrePeriodo     Valor Secreto #> 1      EXTRACCION NACIONAL 2021 (avance) 382696488   FALSE #> 2              1.  Biomasa 2021 (avance) 135338763   FALSE #> 3 1.1.  Cultivos primarios 2021 (avance)  73842188   FALSE"},{"path":"https://uvima.github.io/ineapir/articles/identify_codes.html","id":"obtaining-the-identification-code-of-a-series","dir":"Articles","previous_headings":"","what":"Obtaining the identification code of a series","title":"How to identify the codes of tables and series on the INE website","text":"tables introduced cases two three include temporal series. tables case one contain temporal series. order obtain identification code series necessary carry number steps. Browse table containing series interest. Make selection values table perform query. Click corresponding value cell. pop-window shows, among information, identification code series associated cell clicked .","code":"# Request series data with code = IPC251856 serie <- get_data_series(codSeries = \"IPC251856\", unnest = TRUE) serie[1,c(\"Nombre\", \"FK_Periodo\", \"Anyo\", \"Valor\")] #>                                              Nombre FK_Periodo Anyo Valor #> 1 Total Nacional. Índice general. Variación anual.           9 2023   3.5"},{"path":"https://uvima.github.io/ineapir/articles/tips.html","id":"use-of-verbose","dir":"Articles","previous_headings":"","what":"Use of verbose","title":"Tips","text":"argument verbose = TRUE passed function, number information displayed console, including URL used call API.","code":"library(ineapir)  # Variables used in the operation IPC and verbose = TRUE variables <- get_metadata_variables(operation = \"IPC\", verbose = TRUE) #> - Check lang: OK #> - API URL: https://servicios.ine.es/wstempus/js/ES/OPERACIONES_DISPONIBLES?page=1 #> - Check operation: OK #> - Check page: OK #> - API URL: https://servicios.ine.es/wstempus/js/ES/VARIABLES_OPERACION/IPC?page=1"},{"path":"https://uvima.github.io/ineapir/articles/tips.html","id":"use-of-validate","dir":"Articles","previous_headings":"","what":"Use of validate","title":"Tips","text":"necessary validate values arguments passed function, validation can turned validate = FALSE. useful filtering data filter using one want. Turning validation means making fewer API calls. better performance, recommended use codes filter instead shortcuts disable validation sure filter correct.","code":"# Variables used in the operation IPC with verbose = TRUE and validate = FALSE variables <- get_metadata_variables(operation = \"IPC\", verbose = TRUE,                                     validate = FALSE) #> - API URL: https://servicios.ine.es/wstempus/js/ES/VARIABLES_OPERACION/IPC?page=1 # The filter  filter <- list(\"115\" = \"2\",     # variable id = 115, value id = 2                \"3\" = \"74\" ,     # variable id = 3, value id = 74                \"762\" = \"304092\" # variable id = 762, value id = 304092                )  # Request data using the filter with verbose = TRUE and validate = TRUE ipc <- get_data_series_filter(operation = \"IPC\", filter = filter, periodicity = 1,                        verbose = TRUE) #> - Check lang: OK #> - API URL: https://servicios.ine.es/wstempus/js/ES/OPERACIONES_DISPONIBLES?page=1 #> - Check operation: OK #> - API URL: https://servicios.ine.es/wstempus/js/ES/VARIABLES_OPERACION/IPC?page=1 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/3/IPC?det=0&page=1 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/70/IPC?det=0&page=1 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/115/IPC?det=0&page=1 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/269/IPC?det=0&page=1 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/270/IPC?det=0&page=1 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/349/IPC?det=0&page=1 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/544/IPC?det=0&page=1 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/762/IPC?det=0&page=1 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/763/IPC?det=0&page=1 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/764/IPC?det=0&page=1 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/765/IPC?det=0&page=1 #> - Check filter: OK #> - API URL: https://servicios.ine.es/wstempus/js/ES/PERIODICIDAD_OPERACION/IPC #> - Check periodicity: OK #> - Check nlast: OK #> - Check det: OK #> - Check page: OK #> - Processing filter: 0%  - Processing filter: 67%         - Processing filter: 83%         - Processing filter: 100%         - Processing filter: 100%          #> - API URL: https://servicios.ine.es/wstempus/js/ES/DATOS_METADATAOPERACION/IPC?p=1&nult=1&det=0&page=1&g1=115%3A2&g2=3%3A74&g3=762%3A304092  # Request data using the filter with verbose = TRUE and validate = FALSE ipc <- get_data_series_filter(operation = \"IPC\", filter = filter, periodicity = 1,                        verbose = TRUE, validate = FALSE) #> - Processing filter: 0%  - Processing filter: 67%         - Processing filter: 83%         - Processing filter: 100%         - Processing filter: 100%          #> - API URL: https://servicios.ine.es/wstempus/js/ES/DATOS_METADATAOPERACION/IPC?p=1&nult=1&det=0&page=1&g1=115%3A2&g2=3%3A74&g3=762%3A304092"},{"path":"https://uvima.github.io/ineapir/articles/tips.html","id":"use-of-lang","dir":"Articles","previous_headings":"","what":"Use of lang","title":"Tips","text":"possible retrieve information English passing argument lang = \"EN\" certain functions. can use English language well filtering data using shortcuts.","code":"# Variables used in the operation IPC and lang = \"EN\" variables <- get_metadata_variables(operation = \"IPC\", lang = \"EN\") variables #>     Id                            Nombre Codigo #> 1    3                      Type of data        #> 2   70 Autonomous Communities and Cities   CCAA #> 3  115                         Provinces   PROV #> 4  269               Special groups 2001        #> 5  270                     Headings 2001        #> 6  349                   Regional totals    NAC #> 7  544            Correction of effects         #> 8  762                    Grupos ECOICOP        #> 9  763                 Subgrupos ECOICOP        #> 10 764                    Clases ECOICOP        #> 11 765                 Subclases ECOICOP # Filter with the values wrapper (CPI) filter <- list(values = c(\"annual change\" , \"overall index\"))  # Request data using the filter with shortcut = TRUE and lang = \"EN\" cpi <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 5, lang = \"EN\")  cpi[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                                     Nombre #> 1   National Total. Overall index. Annual variation (for monthly series).  #> 1.1 National Total. Overall index. Annual variation (for monthly series).  #> 1.2 National Total. Overall index. Annual variation (for monthly series).  #> 1.3 National Total. Overall index. Annual variation (for monthly series).  #> 1.4 National Total. Overall index. Annual variation (for monthly series).  #>     T3_Periodo Anyo Valor #> 1          M09 2023   3.5 #> 1.1        M08 2023   2.6 #> 1.2        M07 2023   2.3 #> 1.3        M06 2023   1.9 #> 1.4        M05 2023   3.2"},{"path":"https://uvima.github.io/ineapir/articles/tips.html","id":"use-of-unnest","dir":"Articles","previous_headings":"","what":"Use of unnest","title":"Tips","text":"request data tables series using functions get_data_table(), get_data_series() get_data_series_filter, $Data column containing data values list data frames, one entry. want get one data frame data values, can pass argument unnest = TRUE.","code":"# Filter with the values wrapper (CPI) filter <- list(values = c(\"variación anual\" , \"variación mensual\", \"índice general\"))  # Request data using the filter and unnest = FALSE ipc <- get_data_table(idTable = 50902, filter = filter, tip = \"A\", nlast = 3)  # We have two entries  ipc[,c(\"COD\",\"Nombre\")] #>         COD                                              Nombre #> 1 IPC251855 Total Nacional. Índice general. Variación mensual.  #> 2 IPC251856   Total Nacional. Índice general. Variación anual.   # Data column is a list of two data frames. One for each entry.   ipc$Data #> [[1]] #>                           Fecha T3_TipoDato T3_Periodo Anyo Valor #> 1 2023-09-01T00:00:00.000+02:00  Definitivo        M09 2023   0.2 #> 2 2023-08-01T00:00:00.000+02:00  Definitivo        M08 2023   0.5 #> 3 2023-07-01T00:00:00.000+02:00  Definitivo        M07 2023   0.2 #>  #> [[2]] #>                           Fecha T3_TipoDato T3_Periodo Anyo Valor #> 1 2023-09-01T00:00:00.000+02:00  Definitivo        M09 2023   3.5 #> 2 2023-08-01T00:00:00.000+02:00  Definitivo        M08 2023   2.6 #> 3 2023-07-01T00:00:00.000+02:00  Definitivo        M07 2023   2.3 # Filter with the values wrapper (CPI) filter <- list(values = c(\"variación anual\" , \"variación mensual\", \"índice general\"))  # Request data using the filter and unnest = TRUE ipc <- get_data_table(idTable = 50902, filter = filter, tip = \"A\",                       nlast = 3, unnest = TRUE)  # Unique data frame with 6 rows ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                  Nombre T3_Periodo Anyo Valor #> 1   Total Nacional. Índice general. Variación mensual.         M09 2023   0.2 #> 1.1 Total Nacional. Índice general. Variación mensual.         M08 2023   0.5 #> 1.2 Total Nacional. Índice general. Variación mensual.         M07 2023   0.2 #> 2     Total Nacional. Índice general. Variación anual.         M09 2023   3.5 #> 2.1   Total Nacional. Índice general. Variación anual.         M08 2023   2.6 #> 2.2   Total Nacional. Índice general. Variación anual.         M07 2023   2.3"},{"path":"https://uvima.github.io/ineapir/articles/tips.html","id":"use-of-metanames-and-metacodes","dir":"Articles","previous_headings":"","what":"Use of metanames and metacodes","title":"Tips","text":"pass argument metanames = TRUE get additional columns contain names values extracted metadata information. get additional columns containing codes ids values extracted metadata information pass argument metacodes = TRUE.","code":"# Filter for total population of men and women  filter <- list(nacionalidad = \"total\", sexo = c(\"hombres\", \"mujeres\"))  # Table: Resident population by date, sex, age group and nationality poblacion <- get_data_table(idTable = 9674, filter = filter, validate = FALSE,                              tip = \"AM\", unnest = TRUE, nlast = 1) #> No encoding supplied: defaulting to UTF-8. # Names of columns names(poblacion) #> NULL  # Request data with metanames = TRUE poblacion <- get_data_table(idTable = 9674, filter = filter, validate = FALSE,                              tip = \"AM\", unnest = TRUE, nlast = 1,                             metanames =  TRUE, metacodes = TRUE) #> No encoding supplied: defaulting to UTF-8.  # Additional columns of Nacionalidad, Edad and Sexo names(poblacion) #> NULL"},{"path":"https://uvima.github.io/ineapir/articles/tips.html","id":"filtering-with-regular-expresions","dir":"Articles","previous_headings":"","what":"Filtering with regular expresions","title":"Tips","text":"use shortcuts names filter, can also include values regular expressions helps us filter data better.","code":"# Filter with a regular expression for ages between 20 and 25 years old filter <- list(sexo = \"total\", edad = \"2[0-5]+\")  # Request data using the filter with a regular expression pob <- get_data_table(idTable = 56934, filter = filter, tip = \"A\", nlast = 1,                       unnest = TRUE)  # Only ages between 20 and 25 years old pob[,c(\"Nombre\", \"Anyo\", \"Valor\")] #>                                                Nombre Anyo  Valor #> 1 Total Nacional. 20 años. Total. Población. Número.  2021 482248 #> 2 Total Nacional. 21 años. Total. Población. Número.  2021 475310 #> 3 Total Nacional. 22 años. Total. Población. Número.  2021 465844 #> 4 Total Nacional. 23 años. Total. Población. Número.  2021 477031 #> 5 Total Nacional. 24 años. Total. Población. Número.  2021 476079 #> 6 Total Nacional. 25 años. Total. Población. Número.  2021 482112"},{"path":"https://uvima.github.io/ineapir/articles/usage.html","id":"example-1--interactive-time-series","dir":"Articles","previous_headings":"","what":"Example 1. Interactive time series","title":"Usage examples","text":"","code":"library(ineapir) library(plotly) #> Loading required package: ggplot2 #>  #> Attaching package: 'plotly' #> The following object is masked from 'package:ggplot2': #>  #>     last_plot #> The following object is masked from 'package:stats': #>  #>     filter #> The following object is masked from 'package:graphics': #>  #>     layout  # Filter cpi overall index filter <- list(values = c(\"variación anual\" , \"índice general\"))  # Request data of cpi # Table url: https://www.ine.es/jaxiT3/Tabla.htm?t=50902&L=0 general <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                           tip = \"A\", validate = FALSE)  # Filter core cpi filter <- list(values = c(\"variación anual\" ,                         \"general sin alimentos no elaborados ni productos energéticos\"))  # Request data of core cpi # Table url: https://www.ine.es/jaxiT3/Tabla.htm?t=50907&L=0 subyacente <- get_data_table(idTable = 50907, filter = filter, unnest = TRUE,                              tip = \"A\", validate = FALSE)  # Format Fecha column as date general$Fecha <- as.Date(general$Fecha) subyacente$Fecha <- as.Date(subyacente$Fecha)  # Plot cpi overall index fig <- plot_ly(general, x = ~Fecha, y = ~Valor, name = 'General',                type = 'scatter', mode = 'lines')  ## Plot core cpi fig <- fig %>% add_trace(y = ~subyacente$Valor, name = 'Subyacente',                          mode = 'lines') %>%   layout(yaxis = list(title=\"Variación anual (%)\"),          legend = list(title=list(text='<b> IPC <\/b>'),                        x = 0.25,                        y = -0.25,                        orientation = 'h'),          hovermode = 'x') %>%   config(displayModeBar = FALSE)  fig"},{"path":"https://uvima.github.io/ineapir/articles/usage.html","id":"example-2--population-pyramid","dir":"Articles","previous_headings":"","what":"Example 2. Population pyramid","title":"Usage examples","text":"","code":"library(forcats)  # Filter for total population of men and women  filter <- list(nacionalidad = \"total\", sexo = c(\"hombres\", \"mujeres\"))  # Table: Resident population by date, sex, age group and nationality # Table url: https://www.ine.es/jaxiT3/Tabla.htm?t=56936&L=0 poblacion <- get_data_table(idTable = 56936, filter = filter, validate = FALSE,                              tip = \"AM\", unnest = TRUE, metanames = TRUE)  # Filter and calculate percentages pob <- poblacion %>%    filter(Grupo.quinquenal.de.edad != \"Todas las edades\" & T3_Periodo == \"1 de enero de\") %>%   group_by(Anyo) %>%    mutate(Total = sum(Valor),           Porcentaje = Valor/Total*100,           Grupo.quinquenal.de.edad = fct_inorder(trimws(Grupo.quinquenal.de.edad))) %>%   ungroup() %>%   mutate(Porcentaje = ifelse(Sexo == \"Hombres\",                              -Porcentaje, Porcentaje))    # Pyramid using plotly fig <- plot_ly(pob, x = ~Porcentaje , y = ~Grupo.quinquenal.de.edad, color = ~Sexo,                 colors = c(\"blue\", \"red\"), type = 'bar', frame = ~Anyo) %>%         layout(bargap = 0.1, barmode = 'overlay',               xaxis = list(hoverformat = '.2f'),               yaxis = list(title=\"Edad\"),               title = 'Población residente por sexo y grupo de edad') %>%        animation_slider(currentvalue = list(prefix = \"Año: \")) %>%        config(displayModeBar = FALSE)  fig"},{"path":"https://uvima.github.io/ineapir/articles/usage.html","id":"example-3--interactive-bar-chart-","dir":"Articles","previous_headings":"","what":"Example 3. Interactive bar chart.","title":"Usage examples","text":"","code":"# Filter for unemployment rates filter = list(ccaa = \"\", sexo = \"ambos\", edad = \"total\")  # Table: Unemployment rates by different age groups, sex and Autonomous Community # Table url: https://www.ine.es/jaxiT3/Tabla.htm?t=4247&L=0 paro <- get_data_table(idTable = 4247, filter = filter, nlast = 1, unnest = TRUE,                        metanames = TRUE, tip = \"AM\", validate = FALSE)  # Bar chart using plotly fig <- plot_ly(paro,                 x = ~paro$Comunidades.y.Ciudades.Autónomas,                y = ~Valor, type = \"bar\") %>%        config(displayModeBar = FALSE) %>%        layout(xaxis = list(title=\"\", tickangle = -45),               yaxis = list(title = \"Tasa de paro (%)\"),               title = sprintf(\"Tasa de paro por Comunidad Autónoma (%s %s)\",                               paro$Anyo[1], paro$T3_Periodo[1])               )  fig"},{"path":"https://uvima.github.io/ineapir/articles/usage.html","id":"example-4--interactive-map-","dir":"Articles","previous_headings":"","what":"Example 4. Interactive map.","title":"Usage examples","text":"","code":"library(leaflet) library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE library(htmltools)  # Get the boundaries of the autonomous communities ccaa <- read_sf(\"https://www.ine.es/wstempus/geojs/ES/CONTORNOS/70\")  # Filter for unemployment rates filter = list(ccaa = \"\", sexo = \"ambos\", edad = \"total\")  # Table: Unemployment rates by different age groups, sex and Autonomous Community # Table url: https://www.ine.es/jaxiT3/Tabla.htm?t=4247&L=0 paro <- get_data_table(idTable = 4247, filter = filter, nlast = 1, unnest = TRUE,                        metacodes = TRUE, tip = \"AM\", validate = FALSE)  # Select a set on columns from data paro <- subset(paro, select = c(\"Comunidades.y.Ciudades.Autónomas.Id\", \"T3_Periodo\",                                 \"Anyo\",\"Valor\"))  # Join boundaries information with data information ccaa <- merge(ccaa, paro, by.x = \"id_region\",                by.y = \"Comunidades.y.Ciudades.Autónomas.Id\" )  # Create the palette of the legend pal <- colorBin(\"plasma\", domain = NULL, bins = c(quantile(ccaa$Valor)))  # Labels of the map labels <- sprintf(   \"<strong>%s<\/strong><br/> Tasa de paro: %s%% \",   ccaa$nom_region, ccaa$Valor ) %>% lapply(htmltools::HTML)   # Create the map m <- leaflet(ccaa) %>%    addTiles() %>%   setView(-4, 40, zoom = 5) %>%   addPolygons(fillOpacity = 0.8,               fillColor = ~pal(Valor),               weight = 1,               color = \"white\",               label = labels,               labelOptions = labelOptions(                 style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),                 textsize = \"15px\",                 direction = \"auto\"               ),               highlightOptions = highlightOptions(fillOpacity = 1, bringToFront = TRUE,                                                    weight = 2, color = \"white\")   ) %>%   addLegend(pal = pal, values = ~Valor, opacity = 1.0, position = \"bottomright\",             labFormat = labelFormat(suffix = \"%\", digits = 2),             title = sprintf(\"Tasa de paro (%s %s)\",                             paro$Anyo[1], paro$T3_Periodo[1]))  m"},{"path":"https://uvima.github.io/ineapir/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Crespo. Author, maintainer. Instituto Nacional de Estadistica, INE. Copyright holder.","code":""},{"path":"https://uvima.github.io/ineapir/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Crespo D (2023). ineapir: Obtaining data published National Statistics Institute. https://github.com/uvima/ineapir, https://uvima.github.io/ineapir/.","code":"@Manual{,   title = {ineapir: Obtaining data published by the National Statistics Institute},   author = {David Crespo},   year = {2023},   note = {https://github.com/uvima/ineapir, https://uvima.github.io/ineapir/}, }"},{"path":[]},{"path":"https://uvima.github.io/ineapir/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Obtaining data published by the National Statistics Institute","text":"ineapir provides set functions obtain open data metadata published National Statistics Institute Spain (INE). data obtained thanks calls INE API service allows access via URL requests available statistical information published INE.","code":""},{"path":"https://uvima.github.io/ineapir/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Obtaining data published by the National Statistics Institute","text":"install development version ineapir can download source code zip file install follows. Alternatively, public repositories case personal access token (private repositories).","code":"remotes::install_local(path = \"path/to/file.zip\") remotes::install_github(\"uvima/ineapir\")"},{"path":"https://uvima.github.io/ineapir/index.html","id":"data-request-examples","dir":"","previous_headings":"","what":"Data request examples","title":"Obtaining data published by the National Statistics Institute","text":"data associated series object can grouped together statistical tables. field named ‘Valor’ one contains data. rest fields necessary data well defined.","code":""},{"path":"https://uvima.github.io/ineapir/index.html","id":"obtaining-data-from-a-table","dir":"","previous_headings":"Data request examples","what":"Obtaining data from a table","title":"Obtaining data published by the National Statistics Institute","text":"get data table necessary pass idTable argument, identification code table, function get_data_table(). get last n data table necessary pass nlast argument well.","code":"library(ineapir)  # We use the function get_data_table with the argument idTable # and the argument tip = 'A' for a more friendly output table <- get_data_table(idTable = 50902, tip = \"A\")  # Each row represents a series table[1,c(\"COD\", \"Nombre\")] #>         COD                                   Nombre #> 1 IPC251852 Total Nacional. Índice general. Índice.  # The Data column contains a data frame for each row with the values  # of the different periods of each series head(table$Data[[1]]) #>                           Fecha T3_TipoDato T3_Periodo Anyo   Valor #> 1 2023-08-01T00:00:00.000+02:00  Definitivo        M08 2023 113.149 #> 2 2023-07-01T00:00:00.000+02:00  Definitivo        M07 2023 112.544 #> 3 2023-06-01T00:00:00.000+02:00  Definitivo        M06 2023 112.354 #> 4 2023-05-01T00:00:00.000+02:00  Definitivo        M05 2023 111.719 #> 5 2023-04-01T00:00:00.000+02:00  Definitivo        M04 2023 111.773 #> 6 2023-03-01T00:00:00.000+01:00  Definitivo        M03 2023 111.111  # We can concatenate all data frames into one using unnest = TRUE table <- get_data_table(idTable = 50902, tip = \"A\", unnest = TRUE) head(table[,c(\"COD\", \"Nombre\", \"Fecha\", \"Valor\")]) #>           COD                                   Nombre #> 1   IPC251852 Total Nacional. Índice general. Índice.  #> 1.1 IPC251852 Total Nacional. Índice general. Índice.  #> 1.2 IPC251852 Total Nacional. Índice general. Índice.  #> 1.3 IPC251852 Total Nacional. Índice general. Índice.  #> 1.4 IPC251852 Total Nacional. Índice general. Índice.  #> 1.5 IPC251852 Total Nacional. Índice general. Índice.  #>                             Fecha   Valor #> 1   2023-08-01T00:00:00.000+02:00 113.149 #> 1.1 2023-07-01T00:00:00.000+02:00 112.544 #> 1.2 2023-06-01T00:00:00.000+02:00 112.354 #> 1.3 2023-05-01T00:00:00.000+02:00 111.719 #> 1.4 2023-04-01T00:00:00.000+02:00 111.773 #> 1.5 2023-03-01T00:00:00.000+01:00 111.111 # We use the function get_data_table with arguments idTable and nlast table <- get_data_table(idTable = 50902, nlast = 2) table[1,c(\"COD\", \"Nombre\")] #>         COD                                   Nombre #> 1 IPC251852 Total Nacional. Índice general. Índice. head(table$Data[[1]]) #>          Fecha FK_TipoDato FK_Periodo Anyo   Valor Secreto #> 1 1.690841e+12           1          8 2023 113.149   FALSE #> 2 1.688162e+12           1          7 2023 112.544   FALSE"},{"path":"https://uvima.github.io/ineapir/index.html","id":"obtaining-data-from-a-series","dir":"","previous_headings":"Data request examples","what":"Obtaining data from a series","title":"Obtaining data published by the National Statistics Institute","text":"get last data series necessary pass codSeries argument, identification code series, function get_data_series(). get last n data series necessary pass nlast argument well. Additionally, possible obtain data series two dates. date must specific format (yyyy/mm/dd). end date specified obtain data start date.","code":"# We use the function get_data_series with the argument codSeries series <- get_data_series(codSeries = \"IPC251856\", tip = \"A\") series$Data #>                           Fecha T3_TipoDato T3_Periodo Anyo Valor #> 1 2023-08-01T00:00:00.000+02:00  Definitivo        M08 2023   2.6 # We use the function get_data_series with arguments codSeries and nlast series <- get_data_series(codSeries = \"IPC251856\", tip = \"A\", nlast = 5) series$Data #>                           Fecha T3_TipoDato T3_Periodo Anyo Valor #> 1 2023-04-01T00:00:00.000+02:00  Definitivo        M04 2023   4.1 #> 2 2023-05-01T00:00:00.000+02:00  Definitivo        M05 2023   3.2 #> 3 2023-06-01T00:00:00.000+02:00  Definitivo        M06 2023   1.9 #> 4 2023-07-01T00:00:00.000+02:00  Definitivo        M07 2023   2.3 #> 5 2023-08-01T00:00:00.000+02:00  Definitivo        M08 2023   2.6  # Using unnest = TRUE series <- get_data_series(codSeries = \"IPC251856\", tip = \"A\", nlast = 5,                           unnest = TRUE) head(series[,c(\"COD\", \"Nombre\", \"Fecha\", \"Valor\")]) #>           COD                                            Nombre #> 1   IPC251856 Total Nacional. Índice general. Variación anual.  #> 1.1 IPC251856 Total Nacional. Índice general. Variación anual.  #> 1.2 IPC251856 Total Nacional. Índice general. Variación anual.  #> 1.3 IPC251856 Total Nacional. Índice general. Variación anual.  #> 1.4 IPC251856 Total Nacional. Índice general. Variación anual.  #>                             Fecha Valor #> 1   2023-04-01T00:00:00.000+02:00   4.1 #> 1.1 2023-05-01T00:00:00.000+02:00   3.2 #> 1.2 2023-06-01T00:00:00.000+02:00   1.9 #> 1.3 2023-07-01T00:00:00.000+02:00   2.3 #> 1.4 2023-08-01T00:00:00.000+02:00   2.6 # We use the function get_data_series with arguments codSeries, dateStart and dataEnd series <- get_data_series(codSeries = \"IPC251856\", dateStart = \"2023/01/01\",                            dateEnd = \"2023/04/01\") series$Data #>          Fecha FK_TipoDato FK_Periodo Anyo Valor Secreto #> 1 1.672528e+12           1          1 2023   5.9   FALSE #> 2 1.675206e+12           1          2 2023   6.0   FALSE #> 3 1.677625e+12           1          3 2023   3.3   FALSE #> 4 1.680300e+12           1          4 2023   4.1   FALSE"},{"path":"https://uvima.github.io/ineapir/index.html","id":"metadata-request-examples","dir":"","previous_headings":"","what":"Metadata request examples","title":"Obtaining data published by the National Statistics Institute","text":"Structural metadata objects describe time series statistical tables allow definition. database objects associated identifier essential correct use service.","code":""},{"path":"https://uvima.github.io/ineapir/index.html","id":"obtaining-statistical-operations","dir":"","previous_headings":"Metadata request examples","what":"Obtaining statistical operations","title":"Obtaining data published by the National Statistics Institute","text":"database contains information short-term statistical operations, periodicity disseminating results less year, well structural statistical operations. can get operations using function get_metadata_operations(). operation can identify numerical code (‘Id’), alphabetic code (‘Codigo’) code statistical operation Inventory Statistical Operations (IOE + ‘Cod_IOE’). obtain information one operation pass operation argument one codes.","code":"# We use the function get_metadata_operations operations <- get_metadata_operations() head(operations) #>   Id Cod_IOE                                                 Nombre Codigo  Url #> 1  4   30147           Estadística de Efectos de Comercio Impagados     EI <NA> #> 2  6   30211                     Índice de Coste Laboral Armonizado   ICLA <NA> #> 3  7   30168 Estadística de Transmisión de Derechos de la Propiedad   ETDP <NA> #> 4 10   30256                                    Indicadores Urbanos     UA <NA> #> 5 13   30219                Estadística del Procedimiento Concursal    EPC <NA> #> 6 14   30182                Índices de Precios del Sector Servicios    IPS <NA> # We use the function get_metadata_operations with argument operation operation <- get_metadata_operations(operation = \"IPC\") as.data.frame(operation) #>   Id Cod_IOE                             Nombre Codigo #> 1 25   30138 Índice de Precios de Consumo (IPC)    IPC"},{"path":"https://uvima.github.io/ineapir/index.html","id":"obtaining-variables","dir":"","previous_headings":"Metadata request examples","what":"Obtaining variables","title":"Obtaining data published by the National Statistics Institute","text":"can get variables system using function get_metadata_variables(). variable can identify numerical code (‘Id’). addition, pass operation argument obtain variables used operation.","code":"# We use the function get_metadata_variables variables <- get_metadata_variables() head(variables) #>    Id                           Nombre Codigo #> 1 349            Totales Territoriales    NAC #> 2 954                            Total        #> 3  70 Comunidades y Ciudades Autónomas   CCAA #> 4 955       Cultivos, pastos y huertos        #> 5 115                       Provincias   PROV #> 6 956              SAU y Otras tierras # We use the function get_metadata_variables with argument operation, # e.g., operation code = 'IPC' variables <- get_metadata_variables(operation = \"IPC\") head(variables) #>    Id                           Nombre Codigo #> 1   3                     Tipo de dato        #> 2  70 Comunidades y Ciudades Autónomas   CCAA #> 3 115                       Provincias   PROV #> 4 269           Grupos especiales 2001        #> 5 270                    Rúbricas 2001        #> 6 349            Totales Territoriales    NAC"},{"path":"https://uvima.github.io/ineapir/index.html","id":"obtaining-values","dir":"","previous_headings":"Metadata request examples","what":"Obtaining values","title":"Obtaining data published by the National Statistics Institute","text":"get values variable can take necessary pass variable argument, identifier variable, function get_metadata_values(). value can identify numerical code (‘Id’). addition, pass operation argument well obtain values variable takes particular operation.","code":"# We use the function get_metadata_values with argument variable, # e.g., id = 3 (variable 'Tipo de dato') values <- get_metadata_values(variable = 3) head(values) #>   Id Fk_Variable                                                   Nombre #> 1 70           3                                             Datos brutos #> 2 71           3 Datos corregidos de efectos estacionales y de calendario #> 3 72           3                                                Dato base #> 4 73           3                                     Variación trimestral #> 5 74           3                                          Variación anual #> 6 75           3                                                    Euros #>   Codigo #> 1        #> 2        #> 3        #> 4        #> 5        #> 6 # We use the function get_metadata_values with arguments operation and variable, # e.g., operation code = 'IPC' values <- get_metadata_values(operation = \"IPC\", variable = 3) head(values) #>   Id Fk_Variable            Nombre Codigo #> 1 72           3         Dato base        #> 2 74           3   Variación anual        #> 3 83           3            Índice        #> 4 84           3 Variación mensual        #> 5 85           3       Media anual      M #> 6 86           3   Variación anual"},{"path":"https://uvima.github.io/ineapir/index.html","id":"obtaining-tables","dir":"","previous_headings":"Metadata request examples","what":"Obtaining tables","title":"Obtaining data published by the National Statistics Institute","text":"can get tables associated statistical operation using function get_metadata_tables_operation(). table defined different groups selection combo boxes values one several variables take. obtain variables values present table first query groups define table using function get_metadata_table_groups(). identification codes groups, can query values specific group using function get_metadata_table_values(). Alternatively, can use get_metadata_table_varval() function get variables values present table.","code":"# We use the function get_metadata_tables with argument operation tables <- get_metadata_tables_operation(operation = \"IPC\") head(tables[,c(\"Id\",\"Nombre\")]) #>      Id                                                                 Nombre #> 1 24077                    Índice general nacional. Series desde enero de 1961 #> 2 25331                             Ponderaciones: general y de grupos ECOICOP #> 3 35083        Índices nacionales: Componentes para el análisis de la COVID-19 #> 4 49130                        Índices nacionales: general y de grupos ECOICOP #> 5 50902                        Índices nacionales: general y de grupos ECOICOP #> 6 50908 Índices nacionales a impuestos constantes: general y de grupos ECOICOP # We use the function get_metadata_table_groups with argument idTable groups <- get_metadata_table_groups(idTable = 50902) head(groups) #>       Id         Nombre #> 1 110889 Grupos ECOICOP #> 2 110890   Tipo de dato # We use the function get_metadata_table_values with arguments idTable and idGroup values <- get_metadata_table_values(idTable = 50902, idGroup = 110889) head(values, 4) #>       Id Fk_Variable                             Nombre Codigo #> 1 304092         762                     Índice general     00 #> 2 304093         762 Alimentos y bebidas no alcohólicas     01 #> 3 304094         762       Bebidas alcohólicas y tabaco     02 #> 4 304095         762                  Vestido y calzado     03 #>   FK_JerarquiaPadres #> 1               NULL #> 2             304092 #> 3             304092 #> 4             304092 # Using the function get_metadata_table_varval values <- get_metadata_table_varval(idTable = 50902) head(values, 4) #>       Id Fk_Variable                             Nombre Codigo #> 1 304092         762                     Índice general     00 #> 2 304093         762 Alimentos y bebidas no alcohólicas     01 #> 3 304094         762       Bebidas alcohólicas y tabaco     02 #> 4 304095         762                  Vestido y calzado     03"},{"path":"https://uvima.github.io/ineapir/index.html","id":"obtaining-series","dir":"","previous_headings":"Metadata request examples","what":"Obtaining series","title":"Obtaining data published by the National Statistics Institute","text":"data associated series object. obtain information particular series necessary pass codSeries argument, identification code series, function get_metadata_series(). get values variables define series necessary pass codSeries argument well. get series define table necessary pass idTable argument, identification code table, function get_metadata_series_table().","code":"# We use the function get_metadata_series with argument codSeries series <- get_metadata_series(codSeries = \"IPC251856\") as.data.frame(series) #>       Id       COD FK_Operacion #> 1 251856 IPC251856           25 #>                                              Nombre Decimales FK_Periodicidad #> 1 Total Nacional. Índice general. Variación anual.          1               1 #>   FK_Publicacion FK_Clasificacion FK_Escala FK_Unidad #> 1              8               90         1       135 # We use the function get_metadata_series_values with argument codSeries values <- get_metadata_series_values(codSeries = \"IPC251856\") head(values) #>       Id Fk_Variable          Nombre Codigo #> 1  16473         349  Total Nacional     00 #> 2 304092         762  Índice general     00 #> 3     74           3 Variación anual # We use the function get_metadata_series_table with argument idTable series <- get_metadata_series_table(idTable = 50902) head(series[,c(\"COD\", \"Nombre\")], 4) #>         COD                                                          Nombre #> 1 IPC251852                        Total Nacional. Índice general. Índice.  #> 2 IPC251855             Total Nacional. Índice general. Variación mensual.  #> 3 IPC251856               Total Nacional. Índice general. Variación anual.  #> 4 IPC251858 Total Nacional. Índice general. Variación en lo que va de año."},{"path":"https://uvima.github.io/ineapir/reference/get_data_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from a specific series — get_data_series","title":"Get data from a specific series — get_data_series","text":"Retrieve data series published INE calling API","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from a specific series — get_data_series","text":"","code":"get_data_series(   codSeries = NULL,   nlast = 1,   dateStart = NULL,   dateEnd = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE,   unnest = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_data_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from a specific series — get_data_series","text":"codSeries (string): Code series. information codes click link. nlast (int): number periods retrieve. default set 1 period. dateStart (string): initial date requested data. required format yyyy/mm/dd. dateEnd (string): end date requested data. required format yyyy/mm/dd. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. verbose (logical): print additional information, including URL call API service. unnest (logical): set TRUE obtain single data frame data","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from a specific series — get_data_series","text":"Data frame data series according code specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from a specific series — get_data_series","text":"","code":"if (FALSE) { get_data_series(codSeries = \"IPC251856\") get_data_series(codSeries = \"IPC251856\", nlast = 5) get_data_series(codSeries = \"IPC251856\", dateStart = \"2023/01/01\", dateEnd = \"2023/05/01\") }"},{"path":"https://uvima.github.io/ineapir/reference/get_data_series_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from series for a specific operation given a filter — get_data_series_filter","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"Get data series specific operation given filter","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_series_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"","code":"get_data_series_filter(   operation = NULL,   filter = NULL,   periodicity = NULL,   nlast = 1,   det = 0,   tip = NULL,   lang = \"ES\",   page = 1,   validate = TRUE,   verbose = FALSE,   unnest = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_data_series_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"operation (string): Code operation. obtain list available operations see get_metadata_operations(). filter (list): list variables values. periodicity (int): id periodicity series. Common periodicities: 1 (monthly), 3 (quarterly), 6 (bi-annual), 12 (annual). obtain list periodicities see get_metadata_periodicity(). nlast (int): number periods retrieve. default set 1 period. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated. Default value set 1. validate (logical): validate input parameters. FALSE value means fewer API calls. Therefore, recommended set FALSE doubt validity input parameters, including filter. verbose (logical): print additional information, including URL call API service. unnest (logical): obtain single data frame data","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_series_filter.html","id":"filtering-data-from-series","dir":"Reference","previous_headings":"","what":"Filtering data from series","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"request data series possibility filtering data fly using metadata information variables values define series. get variables given operation see get_metadata_variables() get values specific variable see get_metadata_values(). See also get_metadata_series_varval() get values .","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_series_filter.html","id":"filter-format","dir":"Reference","previous_headings":"","what":"Filter format","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"format list(id_variable1 = id_value1, id_variable2 = id_value2). Besides: variable can take one value: list(id_variable1 = c(id_value11, id_value12), id_variable2 = id_value2). variable can take empty character \"\" get possible values: list(id_variable1 = id_value1, id_variable2 = \"\").","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_series_filter.html","id":"using-shortcuts","dir":"Reference","previous_headings":"","what":"Using shortcuts","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"Additionally, shortcuts can used filter. simplify filtering approach using standardized names variable IDs therefore simplify use. format : list(shortcut_variable1 = name1, shortcut_variable2 = name2). Besides, values wrapper can also used: list(values = c(name1, name2). see list available shortcuts, see get_filter_shortcuts() function. Let’s also remark better performance recommended use numeric codes.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_series_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"Data frame data series according operation filter specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_series_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"","code":"if (FALSE) { get_data_series_filter(operation = \"IPC\", periodicity = 1,                        filter = list(\"115\"= c(\"29\",\"28\"), \"3\" = \"84\", \"762\" = \"\")) get_data_series_filter(operation = \"IPC\", periodicity = 1, nlast = 5, unnest = TRUE,                        filter = list(\"115\"= \"28\", \"3\" = \"84\", \"762\" = \"304092\")) }"},{"path":"https://uvima.github.io/ineapir/reference/get_data_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from a specific table — get_data_table","title":"Get data from a specific table — get_data_table","text":"Get data specific table","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from a specific table — get_data_table","text":"","code":"get_data_table(   idTable = NULL,   filter = NULL,   nlast = NULL,   det = NULL,   tip = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE,   unnest = FALSE,   metanames = FALSE,   metacodes = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_data_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from a specific table — get_data_table","text":"idTable (int): id table. information ids click link. filter (list): list variables values. nlast (int): number periods retrieve. default retrieves available periods. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. FALSE value means fewer API calls. Therefore, recommended set FALSE doubt validity input parameters, including filter. verbose (logical): print additional information, including URL call API service. unnest (logical): set TRUE obtain single data frame data. metanames (logical): set TRUE extract name values defined table. names extracted metadata information (mandatory include 'M' tip parameter). Several columns created corresponding values different variables. metacodes (logical): set TRUE extract codes ids values defined table. codes ids extracted metadata information (mandatory include 'M' tip parameter). Several columns created corresponding values different variables.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_table.html","id":"filtering-data-from-tables","dir":"Reference","previous_headings":"","what":"Filtering data from tables","title":"Get data from a specific table — get_data_table","text":"request data tables possibility filtering data fly using metadata information variables values define series. See get_metadata_table_varval() get values . different approaches build filter depending table type.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_table.html","id":"case-one-tempus-table","dir":"Reference","previous_headings":"","what":"Case one: tempus table","title":"Get data from a specific table — get_data_table","text":"URL example. tempus table filter based ids. format list(id_variable1 = id_value1, id_variable2 = id_value2). Besides: variable can take one value: list(id_variable1 = c(id_value11, id_value12), id_variable2 = id_value2). variable can take empty character \"\" get possible values: list(id_variable1 = id_value1, id_variable2 = \"\").","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_table.html","id":"case-two-px-tables","dir":"Reference","previous_headings":"","what":"Case two: px tables","title":"Get data from a specific table — get_data_table","text":"URL example. px table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\").","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_table.html","id":"case-three-tpx-table","dir":"Reference","previous_headings":"","what":"Case three: tpx table","title":"Get data from a specific table — get_data_table","text":"URL example. tpx table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\"). URL example. tpx tables contain variable ids value ids. case, can use ids instead codes build filter. add alias ~id end id: list(id_variable1~id = id_value1~id, id_variable2~id = id_value2~id).","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_table.html","id":"using-shortcuts","dir":"Reference","previous_headings":"","what":"Using shortcuts","title":"Get data from a specific table — get_data_table","text":"Additionally, shortcuts can used filter. simplify filtering approach using standardized names variable IDs therefore simplify use. format tempus table : list(shortcut_variable1 = name1, shortcut_variable2 = name2). However, px tpx tables format : list(values = c(name1, name2). values wrapper can also used tempus tables. see list available shortcuts, see get_filter_shortcuts() function. Let’s also remark better performance recommended use numeric ids tempus tables alphanumeric codes px tpx tables.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from a specific table — get_data_table","text":"Data frame data table according id specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_data_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from a specific table — get_data_table","text":"","code":"if (FALSE) { get_data_table(idTable = 50902) get_data_table(idTable = 50902, nlast = 2, unnest = TRUE, metanames = TRUE,                metacodes = TRUE, tip = \"M\") get_data_table(idTable = 8105, filter = list(\"18\"=\"454\"), verbose = TRUE) get_data_table(idTable = 33387,                filter = list(tipodematerial = c(\"extraccionnacional\",                                                 \"2mineralesmetalicosmineralenbruto\"))) get_data_table(idTable = \"t20/e245/p08/l0/01001.px\",                filter = list(edad3gruposdeedad = \"015anos\",                              sexo = c(\"mujeres\", \"hombres\"))) }"},{"path":"https://uvima.github.io/ineapir/reference/get_filter_shortcuts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all available filter shortcuts — get_filter_shortcuts","title":"Get all available filter shortcuts — get_filter_shortcuts","text":"Get available filter shortcuts","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_filter_shortcuts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all available filter shortcuts — get_filter_shortcuts","text":"","code":"get_filter_shortcuts(lang = \"ES\", validate = TRUE, verbose = FALSE)"},{"path":"https://uvima.github.io/ineapir/reference/get_filter_shortcuts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all available filter shortcuts — get_filter_shortcuts","text":"lang (string): language. Set 'ES' Spanish version shortcuts set 'EN' English version shortcuts. validate (logical): validate input parameters. verbose (logical): print additional information.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_filter_shortcuts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all available filter shortcuts — get_filter_shortcuts","text":"Data frame information available filter shortcuts","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_filter_shortcuts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all available filter shortcuts — get_filter_shortcuts","text":"","code":"if (FALSE) { get_filter_shortcuts() get_filter_shortcuts(lang = \"EN\") }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_operation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the operation for a given table — get_metadata_operation_table","title":"Get the operation for a given table — get_metadata_operation_table","text":"Get operation given table","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_operation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the operation for a given table — get_metadata_operation_table","text":"","code":"get_metadata_operation_table(   idTable = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_operation_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the operation for a given table — get_metadata_operation_table","text":"idTable (int): id table. information ids click link. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_operation_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the operation for a given table — get_metadata_operation_table","text":"Data frame information operation according table specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_operation_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the operation for a given table — get_metadata_operation_table","text":"","code":"if (FALSE) { get_metadata_operation_table(idTable = 50902) }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_operations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all available operations — get_metadata_operations","title":"Get all available operations — get_metadata_operations","text":"Get available operations","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_operations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all available operations — get_metadata_operations","text":"","code":"get_metadata_operations(   operation = NULL,   lang = \"ES\",   page = 0,   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_operations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all available operations — get_metadata_operations","text":"operation (string): code operation. obtain list available operations see get_metadata_operations(). operation specified operations shown lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated (page=0 retrieves pages). validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_operations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all available operations — get_metadata_operations","text":"Data frame information available operations","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_operations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all available operations — get_metadata_operations","text":"","code":"if (FALSE) { get_metadata_operations() get_metadata_operations(operation = \"IPC\") }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_periodicity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all available periodicities — get_metadata_periodicity","title":"Get all available periodicities — get_metadata_periodicity","text":"Get available periodicities","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_periodicity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all available periodicities — get_metadata_periodicity","text":"","code":"get_metadata_periodicity(   operation = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_periodicity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all available periodicities — get_metadata_periodicity","text":"operation (string): Code operation. Provide code get periodicities given operation. obtain list available operations see get_metadata_operations(). operation specified periodicities shown. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_periodicity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all available periodicities — get_metadata_periodicity","text":"Data frame information available periodicities","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_periodicity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all available periodicities — get_metadata_periodicity","text":"","code":"if (FALSE) { get_metadata_periodicity() get_metadata_periodicity(operation = \"IPC\") }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_publication_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the dates of a publication — get_metadata_publication_dates","title":"Get the dates of a publication — get_metadata_publication_dates","text":"Get dates publication","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_publication_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the dates of a publication — get_metadata_publication_dates","text":"","code":"get_metadata_publication_dates(   publication = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   page = 0,   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_publication_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the dates of a publication — get_metadata_publication_dates","text":"publication (int): id publication. obtain list available publications see get_metadata_publications(). det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated (page=0 retrieves pages). validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_publication_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the dates of a publication — get_metadata_publication_dates","text":"Data frame information dates publication specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_publication_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the dates of a publication — get_metadata_publication_dates","text":"","code":"if (FALSE) { get_metadata_publication_dates(publication = 8) }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_publications.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all publications — get_metadata_publications","title":"Get all publications — get_metadata_publications","text":"Get publications","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_publications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all publications — get_metadata_publications","text":"","code":"get_metadata_publications(   operation = NULL,   det = 0,   lang = \"ES\",   page = 0,   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_publications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all publications — get_metadata_publications","text":"operation (string): code operation. Provide code get publications given operation. obtain list available operations see get_metadata_operations(). operation specified publications shown. det (int): level detail. Valid values: 0, 1 2. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated (page=0 retrieves pages). validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_publications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all publications — get_metadata_publications","text":"Data frame information publications","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_publications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all publications — get_metadata_publications","text":"","code":"if (FALSE) { get_metadata_publications() get_metadata_publications(operation = \"IPC\") }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information for a specific series — get_metadata_series","title":"Get information for a specific series — get_metadata_series","text":"Get information specific series","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information for a specific series — get_metadata_series","text":"","code":"get_metadata_series(   codSeries = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information for a specific series — get_metadata_series","text":"codSeries (string): code series. information codes click link. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information for a specific series — get_metadata_series","text":"Data frame information series according code specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information for a specific series — get_metadata_series","text":"","code":"if (FALSE) { get_metadata_series(codSeries = \"IPC206449\") }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the series for a specific operation given a filter — get_metadata_series_filter","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"Get series specific operation given filter","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"","code":"get_metadata_series_filter(   operation = NULL,   filter = NULL,   periodicity = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   page = 1,   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"operation (string): code operation. obtain list available operations see get_metadata_operations(). filter (list): list variables values. periodicity (int): id periodicity series. Common periodicities: 1 (monthly), 3 (quarterly), 6 (bi-annual), 12 (annual). obtain list periodicities see get_metadata_periodicity(). det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated. Default value set 1. validate (logical): validate input parameters. FALSE value means fewer API calls. Therefore, recommended set FALSE doubt validity input parameters, including filter. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_filter.html","id":"filtering-data-from-series","dir":"Reference","previous_headings":"","what":"Filtering data from series","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"request data series possibility filtering data fly using metadata information variables values define series. get variables given operation see get_metadata_variables() get values specific variable see get_metadata_values(). See also get_metadata_series_varval() get values .","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_filter.html","id":"filter-format","dir":"Reference","previous_headings":"","what":"Filter format","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"format list(id_variable1 = id_value1, id_variable2 = id_value2). Besides: variable can take one value: list(id_variable1 = c(id_value11, id_value12), id_variable2 = id_value2). variable can take empty character \"\" get possible values: list(id_variable1 = id_value1, id_variable2 = \"\").","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_filter.html","id":"using-shortcuts","dir":"Reference","previous_headings":"","what":"Using shortcuts","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"Additionally, shortcuts can used filter. simplify filtering approach using standardized names variable IDs therefore simplify use. format : list(shortcut_variable1 = name1, shortcut_variable2 = name2). Besides, values wrapper can also used: list(values = c(name1, name2). see list available shortcuts, see get_filter_shortcuts() function. Let’s also remark better performance recommended use numeric codes.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"Data frame information series according operation filter specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"","code":"if (FALSE) { get_metadata_series_filter(operation = \"IPC\", periodicity = 1,                            filter = list(\"115\"= \"29\", \"3\" = \"84\", \"762\" = \"\"))  }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_operation.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the series for a specific operation — get_metadata_series_operation","title":"Get all the series for a specific operation — get_metadata_series_operation","text":"Get series specific operation","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_operation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the series for a specific operation — get_metadata_series_operation","text":"","code":"get_metadata_series_operation(   operation = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   page = 1,   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_operation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the series for a specific operation — get_metadata_series_operation","text":"operation (string): code operation. obtain list available operations see get_metadata_operations(). det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated. Default value set 1. validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_operation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the series for a specific operation — get_metadata_series_operation","text":"Data frame information series belonging operation.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_operation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the series for a specific operation — get_metadata_series_operation","text":"","code":"if (FALSE) { get_metadata_series_operation(operation = \"IPC\") get_metadata_series_operation(operation = \"IPC\", page = 2) }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the series for a given table — get_metadata_series_table","title":"Get all the series for a given table — get_metadata_series_table","text":"Get series given table","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the series for a given table — get_metadata_series_table","text":"","code":"get_metadata_series_table(   idTable = NULL,   filter = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE,   metanames = FALSE,   metacodes = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the series for a given table — get_metadata_series_table","text":"idTable (int): id table. information ids click link. filter (list): list variables values. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. FALSE value means fewer API calls. Therefore, recommended set FALSE doubt validity input parameters, including filter. verbose (logical): print additional information, including URL call API service. metanames (logical): set TRUE extract name values defined table. names extracted metadata information (mandatory include 'M' tip parameter). Several columns created corresponding values different variables. metacodes (logical): set TRUE extract codes ids values defined table. codes ids extracted metadata information (mandatory include 'M' tip parameter). Several columns created corresponding values different variables.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_table.html","id":"filtering-data-from-tables","dir":"Reference","previous_headings":"","what":"Filtering data from tables","title":"Get all the series for a given table — get_metadata_series_table","text":"request data tables possibility filtering data fly using metadata information variables values define series. See get_metadata_table_varval() get values . different approaches build filter depending table type.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_table.html","id":"case-one-tempus-table","dir":"Reference","previous_headings":"","what":"Case one: tempus table","title":"Get all the series for a given table — get_metadata_series_table","text":"URL example. tempus table filter based ids. format list(id_variable1 = id_value1, id_variable2 = id_value2). Besides: variable can take one value: list(id_variable1 = c(id_value11, id_value12), id_variable2 = id_value2). variable can take empty character \"\" get possible values: list(id_variable1 = id_value1, id_variable2 = \"\").","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_table.html","id":"case-two-px-tables","dir":"Reference","previous_headings":"","what":"Case two: px tables","title":"Get all the series for a given table — get_metadata_series_table","text":"URL example. px table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\").","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_table.html","id":"case-three-tpx-table","dir":"Reference","previous_headings":"","what":"Case three: tpx table","title":"Get all the series for a given table — get_metadata_series_table","text":"URL example. tpx table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\"). URL example. tpx tables contain variable ids value ids. case, can use ids instead codes build filter. add alias ~id end id: list(id_variable1~id = id_value1~id, id_variable2~id = id_value2~id).","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_table.html","id":"using-shortcuts","dir":"Reference","previous_headings":"","what":"Using shortcuts","title":"Get all the series for a given table — get_metadata_series_table","text":"Additionally, shortcuts can used filter. simplify filtering approach using standardized names variable IDs therefore simplify use. format tempus table : list(shortcut_variable1 = name1, shortcut_variable2 = name2). However, px tpx tables format : list(values = c(name1, name2). values wrapper can also used tempus tables. see list available shortcuts, see get_filter_shortcuts() function. Let’s also remark better performance recommended use numeric ids tempus tables alphanumeric codes px tpx tables.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the series for a given table — get_metadata_series_table","text":"Data frame information series given table.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the series for a given table — get_metadata_series_table","text":"","code":"if (FALSE) { get_metadata_series_table(idTable = 50902) get_metadata_series_table(idTable = 50902, filter = list(\"3\" = \"83\")) get_metadata_series_table(idTable = 50902, metanames = TRUE, metacodes = TRUE, tip = \"M\") }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the values for a given series — get_metadata_series_values","title":"Get all the values for a given series — get_metadata_series_values","text":"Get values given series","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the values for a given series — get_metadata_series_values","text":"","code":"get_metadata_series_values(   codSeries = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the values for a given series — get_metadata_series_values","text":"codSeries (string): code series. information codes click link. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the values for a given series — get_metadata_series_values","text":"Data frame information values series according code specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the values for a given series — get_metadata_series_values","text":"","code":"if (FALSE) { get_metadata_series_values(codSeries = \"IPC206449\") }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_varval.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","title":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","text":"Get metadata information variables values series given operation","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_varval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","text":"","code":"get_metadata_series_varval(   operation = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_varval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","text":"operation (string): code operation. obtain list available operations see get_metadata_operations(). lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_varval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","text":"Data frame information variables values define series according operation specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_series_varval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","text":"","code":"if (FALSE) { get_metadata_series_varval(operation = \"IPC\") }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all groups for a specific a table — get_metadata_table_groups","title":"Get all groups for a specific a table — get_metadata_table_groups","text":"Get groups specific table","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all groups for a specific a table — get_metadata_table_groups","text":"","code":"get_metadata_table_groups(   idTable = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all groups for a specific a table — get_metadata_table_groups","text":"idTable (int): id table. information ids click link. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all groups for a specific a table — get_metadata_table_groups","text":"Data frame information groups according table specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all groups for a specific a table — get_metadata_table_groups","text":"","code":"if (FALSE) { get_metadata_table_groups(idTable = 50902) }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all values for a specific table group — get_metadata_table_values","title":"Get all values for a specific table group — get_metadata_table_values","text":"Get values specific table group","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all values for a specific table group — get_metadata_table_values","text":"","code":"get_metadata_table_values(   idTable = NULL,   idGroup = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all values for a specific table group — get_metadata_table_values","text":"idTable (int): id table. information ids click link. idGroup (int): id group variables. get groups specific table see get_metadata_table_groups(). lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all values for a specific table group — get_metadata_table_values","text":"Data frame information values table group according table group specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all values for a specific table group — get_metadata_table_values","text":"","code":"if (FALSE) { get_metadata_table_values(idTable = 50902, idGroup = 110889) }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_varval.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"Get metadata information variables values given table","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_varval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"","code":"get_metadata_table_varval(   idTable = NULL,   filter = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_varval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"idTable (int): id table. information ids click link. filter (list): list variables values. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters.FALSE value means fewer API calls. Therefore, recommended set FALSE doubt validity input parameters, including filter. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_varval.html","id":"filtering-data-from-tables","dir":"Reference","previous_headings":"","what":"Filtering data from tables","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"request data tables possibility filtering data fly using metadata information variables values define series. different approaches build filter depending table type.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_varval.html","id":"case-one-tempus-table","dir":"Reference","previous_headings":"","what":"Case one: tempus table","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"URL example. tempus table filter based ids. format list(id_variable1 = id_value1, id_variable2 = id_value2). Besides: variable can take one value: list(id_variable1 = c(id_value11, id_value12), id_variable2 = id_value2). variable can take empty character \"\" get possible values: list(id_variable1 = id_value1, id_variable2 = \"\").","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_varval.html","id":"case-two-px-tables","dir":"Reference","previous_headings":"","what":"Case two: px tables","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"URL example. px table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\").","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_varval.html","id":"case-three-tpx-table","dir":"Reference","previous_headings":"","what":"Case three: tpx table","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"URL example. tpx table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\"). URL example. tpx tables contain variable ids value ids. case, can use ids instead codes build filter. add alias ~id end id: list(id_variable1~id = id_value1~id, id_variable2~id = id_value2~id).","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_varval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"Data frame information variables values define table according table specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_table_varval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"","code":"if (FALSE) { get_metadata_table_varval(idTable = 50902) get_metadata_table_varval(idTable = 52056, filter = list(NAC = \"00\")) }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_tables_operation.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all tables for a given operation — get_metadata_tables_operation","title":"Get all tables for a given operation — get_metadata_tables_operation","text":"Get tables given operation","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_tables_operation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all tables for a given operation — get_metadata_tables_operation","text":"","code":"get_metadata_tables_operation(   operation = NULL,   det = 0,   tip = NULL,   geo = NULL,   lang = \"ES\",   page = 1,   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_tables_operation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all tables for a given operation — get_metadata_tables_operation","text":"operation (string): code operation. obtain list available operations see get_metadata_operations(). det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . geo (int): set 0 national tables set 1 tables greater level disaggregation. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English page (int): page number. retrieved result query paginated. Default value set 1. validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_tables_operation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all tables for a given operation — get_metadata_tables_operation","text":"Data frame information available tables according operation specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_tables_operation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all tables for a given operation — get_metadata_tables_operation","text":"","code":"if (FALSE) { get_metadata_tables_operation(operation = \"IPC\") }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all values for a specific variable — get_metadata_values","title":"Get all values for a specific variable — get_metadata_values","text":"Get values specific variable","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all values for a specific variable — get_metadata_values","text":"","code":"get_metadata_values(   operation = NULL,   variable = NULL,   det = 0,   lang = \"ES\",   page = 0,   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all values for a specific variable — get_metadata_values","text":"operation (string): code operation. Provide code get values given operation. obtain list available operations see get_metadata_operations(). variable (int): id variable. obtain list available variables see get_metadata_variables(). det (int): level detail. Valid values: 0, 1 2. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated (page=0 retrieves pages). validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all values for a specific variable — get_metadata_values","text":"Data frame information available values variable specified function","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all values for a specific variable — get_metadata_values","text":"","code":"if (FALSE) { get_metadata_values(variable = 115) get_metadata_values(operation = \"IPC\", variable = 115) }"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all available variables — get_metadata_variables","title":"Get all available variables — get_metadata_variables","text":"Get available variables","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all available variables — get_metadata_variables","text":"","code":"get_metadata_variables(   operation = NULL,   lang = \"ES\",   page = 0,   validate = TRUE,   verbose = FALSE )"},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all available variables — get_metadata_variables","text":"operation (string): Code operation. Provide code get variables given operation. obtain list available operations see get_metadata_operations(). operation specified variables shown. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated (page=0 retrieves pages). validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all available variables — get_metadata_variables","text":"Data frame information available variables","code":""},{"path":"https://uvima.github.io/ineapir/reference/get_metadata_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all available variables — get_metadata_variables","text":"","code":"if (FALSE) { get_metadata_variables() get_metadata_variables(operation = \"IPC\") }"},{"path":"https://uvima.github.io/ineapir/news/index.html","id":"ineapir-0009000","dir":"Changelog","previous_headings":"","what":"ineapir 0.0.0.9000","title":"ineapir 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
